"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var Mailgun = require("mailgun-js");
var Handlebars = require("handlebars");
/**
 * Create a NodeMailgun mailer.
 * 	You must create a new NodeMailgun() instance, set the necessary members (below),
 * 	and then call init(). After initialization, you can then call send() to send an
 * 	email.
 *
 * 	Necessary Members:
 * 		- apiKey Mailgun API Key
 * 		- domain Mailgun registered domain
 * 		- fromEmail Email address to send from (Does not have to exist)
 * 		- fromTitle Email address sender name
 *
 * @param apiKey string (Optional) Mailgun API Key
 * @param domain string (Optional) Mailgun registered domain
 */
var NodeMailgun = /** @class */ (function () {
    /**
     * Constructor
     * @param apiKey (Optional) string Mailgun API Key
     * @param domain (Optional) string Mailgun registered domain
     */
    function NodeMailgun(apiKey, domain) {
        // Test mode
        this.testMode = false;
        // Templates
        this.templates = {};
        // String to prepend to message subject
        this.subjectPre = '';
        // String to append to message subject
        this.subjectPost = '';
        // Message body header
        this.header = '';
        // Message body footer
        this.footer = '';
        // Unsubscribe link
        this.unsubscribeLink = true;
        // Set mailgun config
        this.apiKey = apiKey;
        this.domain = domain;
    }
    /**
     * Initialize
     */
    NodeMailgun.prototype.init = function () {
        // Check input
        if (!this.apiKey) {
            throw new Error('Please pass a valid API Key to NodeMailgun()');
        }
        if (!this.domain) {
            throw new Error('Please pass a valid domain to NodeMailgun()');
        }
        if (!this.fromEmail) {
            throw new Error('Please set NodeMailgun::fromEmail');
        }
        if (!this.fromTitle) {
            throw new Error('Please set NodeMailgun::fromTitle');
        }
        // Initialize Mailgun
        this.mailgun = new Mailgun({
            apiKey: this.apiKey,
            domain: this.domain
        });
        return this;
    };
    /**
     * Get the template object by keyname
     * @param name Keyname of the template
     */
    NodeMailgun.prototype.getTemplate = function (name) {
        if (name in this.templates) {
            return this.templates[name];
        }
        else {
            return false;
        }
    };
    /**
     * Initialize mailing list
     * @param list Address to find list by
     */
    NodeMailgun.prototype.initMailingList = function (list) {
        // Check input
        if (!list) {
            throw new Error('Please supply a mailing list');
        }
        if (!this.mailgun) {
            throw new Error('Please run NodeMailgun::init() before \
				::initMailingList()');
        }
        // Get lists
        this.list = this.mailgun.lists(list);
        return this;
    };
    /**
     * Send a message
     * @param to string | string[] Email Address to send message to
     * @param subject string Message subject
     * @param body string Message body
     */
    NodeMailgun.prototype.send = function (to, subject, body, templateVars) {
        var _this = this;
        if (templateVars === void 0) { templateVars = {}; }
        return new Promise(function (accept, reject) {
            if (_this.testMode) {
                accept();
                return;
            }
            // Check mailgun
            if (!_this.mailgun) {
                reject('Please call NodeMailgun::init() before sending a message!');
                return;
            }
            // Create subject
            subject = _this.subjectPre + subject + _this.subjectPost;
            // Create unsubscribe link
            var unsubscribeLink;
            if (_this.unsubscribeLink === true) {
                unsubscribeLink =
                    '<br><br><a href="%unsubscribe_url%">Unsubscribe</a>';
            }
            else if (typeof _this.unsubscribeLink === 'string') {
                unsubscribeLink = '<br><br>' + _this.unsubscribeLink;
            }
            else {
                unsubscribeLink = '';
            }
            // Create body
            body = _this.header + body + _this.footer + unsubscribeLink;
            // Create message parts
            var message = {
                from: _this.fromTitle + " <" + _this.fromEmail + ">",
                to: to,
                subject: subject,
                html: body,
                'recipient-variables': templateVars
            };
            // Send email
            _this.mailgun.messages().send(message, function (error, result) {
                // Pass result through Promise
                error ? reject(error) : accept(result);
            });
        });
    };
    /**
     * Send a message from a template
     * @param to string | string[] Email Address to send message to
     * @param subject string Message subject
     * @param body string Message body
     */
    NodeMailgun.prototype.sendFromTemplate = function (to, template, templateVars) {
        if (templateVars === void 0) { templateVars = {}; }
        var subject, body;
        var subjectCompiler = Handlebars.compile(template.subject);
        var bodyCompiler = Handlebars.compile(template.body);
        var allVars = {};
        allVars = Object.assign(allVars, templateVars);
        allVars = Object.assign(allVars, process.env);
        subject = subjectCompiler(allVars);
        body = bodyCompiler(allVars);
        return this.send(to, subject, body, templateVars);
    };
    /**
     * Get list data of the current mailing list
     */
    NodeMailgun.prototype.getList = function () {
        var _this = this;
        return new Promise(function (accept, reject) {
            _this.list.members().list(function (error, result) {
                error ? reject(error) : accept(result);
            });
        });
    };
    /**
     * Get array of addresses in the current mailing list
     */
    NodeMailgun.prototype.getListAddresses = function () {
        var _this = this;
        return new Promise(function (accept, reject) {
            _this.getList()
                .then(function (list) {
                var addresses = [];
                for (var _i = 0, _a = list.items; _i < _a.length; _i++) {
                    var user = _a[_i];
                    if ('address' in user) {
                        addresses.push(user.address);
                    }
                }
                accept(addresses);
            })
                .catch(function (error) { return reject(error); });
        });
    };
    /**
     * Add a member to the current mailing list
     * @param address Email address to add
     * @param name User's name
     * @param data User data
     */
    NodeMailgun.prototype.listAdd = function (address, name, data) {
        var _this = this;
        return new Promise(function (accept, reject) {
            // Check initialization
            if (!_this.mailgun || !_this.list) {
                reject('Please call NodeMailgun::initMailingList()\
					before adding to a list.');
                return;
            }
            // Create user object
            var user = {
                subscribed: true,
                address: address,
                name: name,
                vars: data
            };
            // Add user to list
            _this.list.members().create(user, function (error, result) {
                error ? reject(error) : accept(result);
            });
        });
    };
    /**
     * Update a user in the list
     * @param address Email address to add
     * @param data User data
     * 		address: string,
     * 		name: string,
     * 		vars: Object
     */
    NodeMailgun.prototype.listUpdate = function (address, data) {
        var _this = this;
        return new Promise(function (accept, reject) {
            // Check initialization
            if (!_this.mailgun || !_this.list) {
                reject('Please call NodeMailgun::initMailingList()\
					before updating a list.');
                return;
            }
            // Update user
            _this.list.members(address).update(data, function (error, result) {
                error ? reject(error) : accept(result);
            });
        });
    };
    /**
     * Unsubscribe a user from the list
     * @param address Email address to remove
     */
    NodeMailgun.prototype.listRemove = function (address) {
        var _this = this;
        return new Promise(function (accept, reject) {
            // Check initialization
            if (!_this.mailgun || !_this.list) {
                reject('Please call NodeMailgun::initMailingList()\
					before removing from a list.');
                return;
            }
            // Update user
            _this.list.members(address).delete(function (error, result) {
                error ? reject(error) : accept(result);
            });
        });
    };
    /**
     * Send to list
     * @param newsletter Newsletter address to send to
     * @param subject Message subject
     * @param body Message body HTML
     */
    NodeMailgun.prototype.listSend = function (newsletter, subject, body) {
        return this.send(newsletter, subject, body, {});
    };
    /**
     * Load header from template file
     * @param file Template file path
     */
    NodeMailgun.prototype.loadHeaderTemplate = function (file) {
        var hbs = Handlebars.compile(fs.readFileSync(file, { encoding: 'utf8' }));
        this.header = hbs(process.env);
    };
    /**
     * Load footer from template file
     * @param file Template file path
     */
    NodeMailgun.prototype.loadFooterTemplate = function (file) {
        var hbs = Handlebars.compile(fs.readFileSync(file, { encoding: 'utf8' }));
        this.footer = hbs(process.env);
    };
    return NodeMailgun;
}());
exports.NodeMailgun = NodeMailgun;
//# sourceMappingURL=ts-mailgun.js.map